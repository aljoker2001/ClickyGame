{"version":3,"sources":["components/Character/Characters.js","components/Wrapper.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["AddCard","props","react_default","a","createElement","className","alt","name","src","image","data-clicked","clicked","toString","title","onClick","handleIncrement","Wrapper","children","Header","score","top","App","state","characters","event","pokemon","target","dataset","_this","setState","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","i","value","err","return","win","randomCharacter","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","alert","concat","array","length","j","Math","floor","random","_ref","_this2","this","components_Header_Header","components_Wrapper","map","character","Characters","key","id","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ikGAaeA,eAVC,SAACC,GACf,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BACbH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,MAAOC,eAAcT,EAAMU,QAAQC,WAAYC,MAAOZ,EAAMM,KAAMO,QAASb,EAAMc,6BCA3GC,MAJf,SAAkBf,GAChB,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAaJ,EAAMgB,WCY5BC,SAbA,SAACjB,GACR,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,8DAAd,wBAGAH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6CACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aAAd,UAAkCJ,EAAMkB,MAAxC,iBAA6DlB,EAAMmB,SCwFpEC,6MA1FbC,MAAQ,CACNC,WAAYA,EACZJ,MAAO,EACPC,IAAK,KAIPL,gBAAkB,SAACS,GAEjB,IAAIC,EAAUD,EAAME,OAAOpB,IAE3B,GAAqC,UAAjCkB,EAAME,OAAOC,QAAQhB,SAAuBiB,EAAKN,MAAMH,MAAQS,EAAKN,MAAMF,IAAK,CACjFQ,EAAKC,SAAS,CAAEV,MAAOS,EAAKN,MAAMH,MAAQ,IAC1CK,EAAME,OAAOC,QAAQhB,QAAU,OAFkD,IAAAmB,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAGjF,QAAAC,EAAAC,EAAcZ,EAAda,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAA0B,KAAjBU,EAAiBN,EAAAO,MACpBhB,IAAYe,EAAEjC,OAChBiC,EAAE7B,SAAU,IALiE,MAAA+B,GAAAX,GAAA,EAAAC,EAAAU,EAAA,YAAAZ,GAAA,MAAAK,EAAAQ,QAAAR,EAAAQ,SAAA,WAAAZ,EAAA,MAAAC,GAQjFJ,EAAKgB,IAAIpB,GACTI,EAAKiB,gBAAgBtB,QAEhB,GAAqC,UAAjCC,EAAME,OAAOC,QAAQhB,SAAuBiB,EAAKN,MAAMH,QAAUS,EAAKN,MAAMF,IAAK,CAC1FQ,EAAKC,SAAS,CAAEV,MAAOS,EAAKN,MAAMH,MAAQ,IAC1CS,EAAKC,SAAS,CAAET,IAAKQ,EAAKN,MAAMF,IAAM,IACtCI,EAAME,OAAOC,QAAQhB,QAAU,OAH2D,IAAAmC,GAAA,EAAAC,GAAA,EAAAC,OAAAf,EAAA,IAI1F,QAAAgB,EAAAC,EAAc3B,EAAda,OAAAC,cAAAS,GAAAG,EAAAC,EAAAZ,QAAAC,MAAAO,GAAA,EAA0B,KAAjBN,EAAiBS,EAAAR,MACpBhB,IAAYe,EAAEjC,OAChBiC,EAAE7B,SAAU,IAN0E,MAAA+B,GAAAK,GAAA,EAAAC,EAAAN,EAAA,YAAAI,GAAA,MAAAI,EAAAP,QAAAO,EAAAP,SAAA,WAAAI,EAAA,MAAAC,GAS1FpB,EAAKgB,IAAIpB,GACTI,EAAKiB,gBAAgBtB,OAEhB,CAGL,IAAK,IAAIiB,KAFTW,MAAK,qBAAAC,OAAsB5B,EAAME,OAAOpB,IAAnC,4CACLsB,EAAKC,SAAS,CAAEV,MAAO,IACTI,EACZA,EAAWiB,GAAG7B,SAAU,EAE1BiB,EAAKiB,gBAAgBtB,OAIzBqB,IAAM,SAACpB,GACL,GAAyB,KAArBI,EAAKN,MAAMH,MAAc,CAG3B,IAAK,IAAIqB,KAFThB,EAAME,OAAOC,QAAQhB,QAAU,QAC/BwC,MAAM,qGACQ5B,EACZA,EAAWiB,GAAG7B,SAAU,EAE1BiB,EAAKC,SAAS,CAAEV,MAAO,QAI3B0B,gBAAkB,SAACQ,GACjB,IAAK,IAAIb,EAAIa,EAAMC,OAAS,EAAGd,EAAI,EAAGA,IAAK,CACzC,IAAIe,EAAIC,KAAKC,MAAMD,KAAKE,UAAYlB,EAAI,IADCmB,EAElB,CAACN,EAAME,GAAIF,EAAMb,IAAvCa,EAAMb,GAFkCmB,EAAA,GAE9BN,EAAME,GAFwBI,EAAA,6EAMpC,IAAAC,EAAAC,KACP,OACE3D,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAC0D,EAAD,CACE3C,MAAO0C,KAAKvC,MAAMH,MAClBC,IAAKyC,KAAKvC,MAAMF,MAElBlB,EAAAC,EAAAC,cAAC2D,EAAD,KACE7D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACZwD,KAAKvC,MAAMC,WAAWyC,IAAI,SAACC,GAAD,OACzB/D,EAAAC,EAAAC,cAAC8D,EAAD,CACEC,IAAKF,EAAUG,GACf3D,MAAOwD,EAAUxD,MACjBF,KAAM0D,EAAU1D,KAChBI,QAASsD,EAAUtD,QACnBQ,MAAOyC,EAAKtC,MAAMH,MAClBC,IAAKwC,EAAKtC,MAAMF,IAChBL,gBAAiB6C,EAAK7C,8BAhFpBsD,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3E,EAAAC,EAAAC,cAAC0E,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0580df01.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Character.css'\r\n\r\nconst AddCard = (props) => {\r\n  return (\r\n    <div className='col-3'>\r\n      <div className='img-container text-white'>\r\n        <img alt={props.name} src={props.image} data-clicked={props.clicked.toString()} title={props.name} onClick={props.handleIncrement} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default AddCard\r\n","import React from 'react'\r\n// import \"./style.css\";\r\n\r\nfunction Wrapper (props) {\r\n  return <div className='container'>{props.children}</div>\r\n}\r\n\r\nexport default Wrapper\r\n","import React from 'react';\r\nimport './Header.css'\r\n\r\nconst Header = (props) => {\r\n        return (\r\n            <div className=\"text-center\">\r\n              <h1 className=\"card-header bg-danger text-white border-bottom border-dark\">\r\n                Pokemon Clicky Game!\r\n              </h1>\r\n              <div className=\"card-body border-top border-dark bg-white\">\r\n                <h3 className=\"card-text\">Score: {props.score} | Top Score: {props.top}</h3>\r\n              </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\nexport default Header;","import React from 'react';\nimport './App.css';\nimport Character from './components/Character/Characters.js'\nimport characters from './characters.json'\nimport Wrapper from './components/Wrapper.js'\nimport Header from './components/Header/Header.js'\n\nclass App extends React.Component {\n  state = {\n    characters: characters,\n    score: 0,\n    top: 0\n  }\n\n  // This method increases the current and top scores while at the same time calling the randomCharacter function after each click\n  handleIncrement = (event) => {\n    // assigns \"pokemon\" as the selected pokemon\n    let pokemon = event.target.alt\n    // This will increase the current score, but not the top score if the current round is beneath the top score\n    if (event.target.dataset.clicked === 'false' && this.state.score < this.state.top) {\n      this.setState({ score: this.state.score + 1 })\n      event.target.dataset.clicked = 'true'\n      for (let i of characters) {\n        if (pokemon === i.name) {\n          i.clicked = true\n        }\n      }\n      this.win(event)\n      this.randomCharacter(characters)\n      // This will increase both the top and current score if the correct answer brings the score past the top score\n    } else if (event.target.dataset.clicked === 'false' && this.state.score === this.state.top) {\n      this.setState({ score: this.state.score + 1 })\n      this.setState({ top: this.state.top + 1 })\n      event.target.dataset.clicked = 'true'\n      for (let i of characters) {\n        if (pokemon === i.name) {\n          i.clicked = true\n        }\n      }\n      this.win(event)\n      this.randomCharacter(characters)\n      // If the user selects an already selected pokemon, the game will end and reset, leaving the top score the same\n    } else {\n      alert(`You already chose ${event.target.alt}.  You suck and you lose.\\n\\nTry again.`)\n      this.setState({ score: 0 })\n      for (let i in characters) {\n        characters[i].clicked = false\n      }\n      this.randomCharacter(characters)\n    }\n  }\n  // Checks to see if the user reached the top score.  If so, they are alerted and the game resets, leaving the top score as 12\n  win = (event) => {\n    if (this.state.score === 11) {\n      event.target.dataset.clicked = 'false'\n      alert('You selected each Pokemon without any duplicates.\\n\\nCongratulations!\\n\\nGet ready to play again.')\n      for (let i in characters) {\n        characters[i].clicked = false\n      }\n      this.setState({ score: 0 })\n    }\n  }\n  // Randomizes the order of the pokemon sent to the Character component\n  randomCharacter = (array) => {\n    for (let i = array.length - 1; i > 0; i--) {\n      let j = Math.floor(Math.random() * (i + 1)); // random index from 0 to i\n      [array[i], array[j]] = [array[j], array[i]]; // swap elements\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <Header\n          score={this.state.score}\n          top={this.state.top}\n        />\n        <Wrapper>\n          <div className=\"d-flex flex-wrap\">\n            {this.state.characters.map((character) => (\n              <Character\n                key={character.id}\n                image={character.image}\n                name={character.name}\n                clicked={character.clicked}\n                score={this.state.score}\n                top={this.state.top}\n                handleIncrement={this.handleIncrement}\n              >\n              </Character>\n            ))}\n          </div>\n        </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}